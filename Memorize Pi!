import webbrowser
import time
import os
import sys

BOLD = '\033[1m'
UNDERLINE = '\033[4m'
END = '\033[0m'

def choose_num():    
    number = "Pi"
    pi = "31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315155748572424541506959508295331168617278558890750983817546374649393192550604009277016711390098488240128583616035637076601047101819429555961989467678374494482553797747268471040475346462080466842590694912933136770289891521047521620569660240580381501935112533824300355876402474964732639141992726042699227967823547816360093417216412199245863150302861829745557067498385054945885869269956909272107975093029553211653449872027559602364806654991198818347977535663698074265425278625518184175746728909777727938000816470600161452491921732172147723501414419735685481613611573525521334757418494684385233239073941433345477624168625189835694855620992192221842725502542568876717904946016534668049886272327917860857843838279679766814541009538837863609506800642251252051173929848960841284886269456042419652850222106611863067442786220391949450471237137869609563643719172874677646575739624138908658326459958133904780275900994657640789512694683983525957098258226205224894077267194782684826014769909026401363944374553050682034962524517493996514314298091906592509372216964615157098583874105978859597729754989301617539284681382686838689427741559918559252459539594310499725246808459872736446958486538367362226260991246080512438843904512441365497627807977156914359977001296160894416948685558484063534220722258284886481584560285060168427394522674676788952521385225499546667278239864565961163548862305774564980355936345681743241125150760694794510965960940252288797108931456691368672287489405601015033086179286809208747609178249385890097149096759852613655497818931297848216829989487226588048575640142704775551323796414515237462343645428584447952658678210511413547357395231134271661021359695362314429524849371871101457654035902799344037420073105785390621983874478084784896833214457138687519435064302184531910484810053706146806749192781911979399520614196634287544406437451237181921799983910159195618146751426912397489409071864942319615679452080951465502252316038819301420937621378559566389377870830390697920773467221825625996615014215030680384477345492026054146659252014974428507325186660021324340881907104863317346496514539057962685610055081066587969981635747363840525714591028970641401109712062804390397595156771577004203378699360072305587631763594218731251471205329281918261861258673215791984148488291644706095752706957220917567116722910981690915280173506712748583222871835209353965725121083579151369882091444210067510334671103141267111369908658516398315019701651511685171437657618351556508849099898599823873455283316355076479185358932261854896321329330898570642046752590709154814165498594616371802709819943099244889575712828905923233260972997120844335732654893823911932597463667305836041428138830320382490375898524374417029132765618093773444030707469211201913020330380197621101100449293215160842444859637669838952286847831235526582131449576857262433441893039686426243410773226978028073189154411010446823252716201052652272111660396665573092547110557853763466820653109896526918620564769312570586356620185581007293606598764861179104533488503461136576867532494416680396265797877185560845529654126654085306143444318586769751456614068007002378776591344017127494704205622305389945613140711270004078547332699390814546646458807972708266830634328587856983052358089330657574067954571637752542021149557615814002501262285941302164715509792592309907965473761255176567513575178296664547791745011299614890304639947132962107340437518957359614589019389713111790429782856475032031986915140287080859904801094121472213179476477726224142548545403321571853061422881375850430633217518297986622371721591607716692547487389866549494501146540628433663937900397692656721463853067360965712091807638327166416274888800786925602902284721040317211860820419000422966171196377921337575114959501566049631862947265473642523081770367515906735023507283540567040386743513622224771589150495309844489333096340878076932599397805419341447377441842631298608099888687413260472156951623965864573021631598193195167353812974167729478672422924654366800980676928238280689964004824354037014163149658979409243237896907069779422362508221688957383798623001593776471651228935786015881617557829735233446042815126272037343146531977774160319906655418763979293344195215413418994854447345673831624993419131814809277771038638773431772075456545322077709212019051660962804909263601975988281613323166636528619326686336062735676303544776280350450777235547105859548702790814356240145171806246436267945612753181340783303362542327839449753824372058353114771199260638133467768796959703098339130771098704085913374641442822772634659470474587847787201927715280731767907707157213444730605700733492436931138350493163128404251219256517980694113528013147013047816437885185290928545201165839341965621349143415956258658655705526904965209858033850722426482939728584783163057777560688876446248246857926039535277348030480290058760758251047470916439613626760449256274204208320856611906254543372131535958450687724602901618766795240616342522577195429162991930645537799140373404328752628889639958794757291746426357455254079091451357111369410911939325191076020825202618798531887705842972591677813149699009019211697173727847684726860849003377024242916513005005168323364350389517029893922334517220138128069650117844087451960121228599371623130171144484640903890644954440061986907548516026327505298349187407866808818338510228334508504860825039302133219715518430635455007668282949304137765527939751754613953984683393638304746119966538581538420568533862186725233402830871123282789212507712629463229563989898935821167456270102183564622013496715188190973038119800497340723961036854066431939509790190699639552453005450580685501956730229219139339185680344903982059551002263535361920419947455385938102343955449597783779023742161727111723643435439478221818528624085140066604433258885698670543154706965747458550332323342107301545940516553790686627333799585115625784322988273723198987571415957811196358330059408730681216028764962867446047746491599505497374256269010490377819868359381465741268049256487985561453723478673303904688383436346553794986419270563872931748723320837601123029911367938627089438799362016295154133714248928307220126901475466847653576164773794675200490757155527819653621323926406160136358155907422020203187277605277219005561484255518792530343513984425322341576233610642506390497500865627109535919465897514131034822769306247435363256916078154781811528436679570611086153315044521274739245449454236828860613408414863776700961207151249140430272538607648236341433462351897576645216413767969031495019108575984423919862916421939949072362346468441173940326591840443780513338945257423995082965912285085558215725031071257012668302402929525220118726767562204154205161841634847565169998116141010029960783869092916030288400269104140792886215078424516709087000699282120660418371806535567252532567532861291042487761825829765157959847035622262934860034158722980534989650226291748788202734209222245339856264766914905562842503912757710284027998066365825488926488025456610172967026640765590429099456815065265305371829412703369313785178609040708667114965583434347693385781711386455873678123014587687126603489139095620099393610310291616152881384379099042317473363948045759314931405297634757481193567091101377517210080315590248530906692037671922033229094334676851422144773793937517034436619910403375111735471918550464490263655128162288244625759163330391072253837421821408835086573917715096828874782656995995744906617583441375223970968340800535598491754173818839994469748676265516582765848358845314277568790029095170283529716344562129640435231176006651012412006597558512761785838292041974844236080071930457618932349229279650198751872127267507981255470958904556357921221033346697499235630254947802490114195212382815309114079073860251522742995818072471625916685451333123948049470791191532673430282441860414263639548000448002670496248201792896476697583183271314251702969234889627668440323260927524960357996469256504936818360900323809293459588970695365349406034021665443755890045632882250545255640564482465151875471196218443965825337543885690941130315095261793780029741207665147939425902989695946995565761218656196733786236256125216320862869222103274889218654364802296780705765615144632046927906821207388377814233562823608963208068222468012248261177185896381409183903673672220888321513755600372798394004152970028783076670944474560134556417254370906979396122571429894671543578468788614445812314593571984922528471605049221242470141214780573455105008019086996033027634787081081754501193071412233908663938339529425786905076431006383519834389341596131854347546495569781038293097164651438407007073604112373599843452251610507027056235266012764848308407611830130527932054274628654036036745328651057065874882256981579367897669742205750596834408697350201410206723585020072452256326513410559240190274216248439140359989535394590944070469120914093870012645600162374288021092764579310657922955249887275846101264836999892256959688159205600101655256375678566722796619885782794848855834397518744545512965634434803966420557982936804352202770984294232533022576341807039476994159791594530069752148293366555661567873640053666564165473217043903521329543529169414599041608753201868379370234888689479151071637852902345292440773659495630510074210871426134974595615138498713757047101787957310422969066670214498637464595280824369445789772330048764765241339075920434019634039114732023380715095222010682563427471646024335440051521266932493419673977041595683753555166730273900749729736354964533288869844061196496162773449518273695588220757355176651589855190986665393549481068873206859907540792342402300925900701731960362254756478940647548346647760411463233905651343306844953979070903023460461470961696886885014083470405460742958699138296682468185710318879065287036650832431974404771855678934823089431068287027228097362480939962706074726455399253994428081137369433887294063079261595995462624629707062594845569034711972996409089418059534393251236235508134949004364278527138315912568989295196427287573946914272534366941532361004537304881985517065941217352462589548730167600298865925786628561249665523533829428785425340483083307016537228563559152534784459818313411290019992059813522051173365856407826484942764411376393866924803118364453698589175442647399882284621844900877769776312795722672655562596282542765318300134070922334365779160128093179401718598599933849235495640057099558561134980252499066984233017350358044081168552653117099570899427328709258487894436460050410892266917835258707859512983441729535195378855345737426085902908176515578039059464087350612322611200937310804854852635722825768203416050484662775045003126200800799804925485346941469775164932709504934639382432227188515974054702148289711177792376122578873477188196825462981268685817050740272550263329044976277894423621674119186269439650671515779586756482399391760426017633870454990176143641204692182370764887834196896861181558158736062938603810171215855272668300823834046564758804051380801633638874216371406435495561868964112282140753302655100424104896783528588290243670904887118190909494533144218287661810310073547705498159680772009474696134360928614849417850171807793068108546900094458995279424398139213505586422196483491512639012803832001097738680662877923971801461343244572640097374257007359210031541508936793008169980536520276007277496745840028362405346037263416554259027601834840306811381855105979705664007509426087885735796037324514146786703688098806097164258497595138069309449401515422221943291302173912538355915031003330325111749156969174502714943315155885403922164097229101129035521815762823283182342548326111912800928252561902052630163911477247331485739107775874425387611746578671169414776421441111263583553871361011023267987756410246824032264834641766369806637857681349204530224081972785647198396308781543221166912246415911776732253264335686146186545222681268872684459684424161078540167681420808850280054143613146230821025941737562389942075713627516745731891894562835257044133543758575342698699472547031656613991999682628247270641336222178923903176085428943733935618891651250424404008952719837873864805847268954624388234375178852014395600571048119498842390606136957342315590796703461491434478863604103182350736502778590897578272731305048893989009923913503373250855982655867089242612429473670193907727130706869170926462548423240748550366080136046689511840093668609546325002145852930950000907151058236267293264537382104938724996699339424685516483261134146110680267446637334375340764294026682973865220935701626384648528514903629320199199688285171839536691345222444708045923966028171565515656661113598231122506289058549145097157553900243931535190902107119457300243880176615035270862602537881797519478061013715004489917210022201335013106016391541589578037117792775225978742891917915522417189585361680594741234193398420218745649256443462392531953135103311476394911995072858430658361935369329699289837914941939406085724863968836903265564364216644257607914710869984315733749648835292769328220762947282381537409961545598798259891093717126218283025848112389011968221429457667580718653806506487026133892822994972574530332838963818439447707794022843598834100358385423897354243956475556840952248445541392394100016207693636846776413017819659379971557468541946334893748439129742391433659360410035234377706588867781139498616478747140793263858738624732889645643598774667638479466504074111825658378878454858148962961273998413442726086061872455452360643153710112746809778704464094758280348769758948328241239292960582948619196670918958089833201210318430340128495116203534280144127617285830243559830032042024512072872535581195840149180969253395075778400067465526031446167050827682772223534191102634163157147406123850425845988419907611287258059113935689601431668283176323567325417073420817332230462987992804908514094790368878687894930546955703072619009502076433493359106024545086453628935456862958531315337183868265617862273637169757741830239860065914816164049449650117321313895747062088474802365371031150898427992754426853277974311395143574172219759799359685252285745263796289612691572357986620573408375766873884266405990993505000813375432454635967504844235284874701443545419576258473564216198134073468541117668831186544893776979566517279662326714810338643913751865946730024434500544995399742372328712494834706044063471606325830649829795510109541836235030309453097335834462839476304775645015008507578949548931393944899216125525597701436858943585877526379625597081677643800125436502371412783467926101995585224717220177723700417808419423948725406801556035998390548985723546745642390585850216719031395262944554391316631345308939062046784387785054239390524731362012947691874975191011472315289326772533918146607300089027768963114810902209724520759167297007850580717186381054967973100167870850694207092232908070383263453452038027860990556900134137182368370991949516489600755049341267876436746384902063964019766685592335654639138363185745698147196210841080961884605456039038455343729141446513474940784884423772175154334260306698831768331001133108690421939031080143784334151370924353013677631084913516156422698475074303297167469640666531527035325467112667522460551199581831963763707617991919203579582007595605302346267757943936307463056901080114942714100939136913810725813781357894005599500183542511841721360557275221035268037357265279224173736057511278872181908449006178013889710770822931002797665935838758909395688148560263224393726562472776037890814458837855019702843779362407825052704875816470324581290878395232453237896029841669225489649715606981192186584926770403956481278102179913217416305810554598801300484562997651121241536374515005635070127815926714241342103301566165356024733807843028655257222753049998837015348793008062601809623815161366903341111386538510919367393835229345888322550887064507539473952043968079067086806445096986548801682874343786126453815834280753061845485903798217994599681154419742536344399602902510015888272164745006820704193761584547123183460072629339550548239557137256840232268213012476794522644820910235647752723082081063518899152692889108455571126603965034397896278250016110153235160519655904211844949907789992007329476905868577878720982901352956613978884860509786085957017731298155314951681467176959760994210036183559138777817698458758104466283998806006162298486169353373865787735983361613384133853684211978938900185295691967804554482858483701170967212535338758621582310133103877668272115726949518179589754693992642197915523385766231676275475703546994148929041301863861194391962838870543677743224276809132365449485366768000001065262485473055861598999140170769838548318875014293890899506854530765116803337322265175662207526951791442252808165171667766727930354851542040238174608923283917032754257508676551178593950027933895920576682789677644531840404185540104351348389531201326378369283580827193783126549617459970567450718332065034556644034490453627560011250184335607361222765949278393706478426456763388188075656121689605041611390390639601620221536849410926053876887148379895599991120991646464411918568277004574243434021672276445589330127781586869525069499364610175685060167145354315814801054588605645501332037586454858403240298717093480910556211671546848477803944756979804263180991756422809873998766973237695737015808068229045992123661689025962730430679316531149401764737693873514093361833216142802149763399189835484875625298752423873077559555955465196394401821840998412489826236737714672260616336432964063357281070788758164043814850188411431885988276944901193212968271588841338694346828590066640806314077757725705630729400492940302420498416565479736705485580445865720227637840466823379852827105784319753541795011347273625774080213476826045022851579795797647467022840999561601569108903845824502679265942055503958792298185264800706837650418365620945554346135134152570065974881916341359556719649654032187271602648593049039787489589066127250794828276938953521753621850796297785146188432719223223810158744450528665238022532843891375273845892384422535472653098171578447834215822327020690287232330053862163479885094695472004795231120150432932266282727632177908840087861480221475376578105819702226309717495072127248479478169572961423658595782090830733233560348465318730293026659645013718375428897557971449924654038681799213893469244741985097334626793321072686870768062639919361965044099542167627840914669856925715074315740793805323925239477557441591845821562518192155233709607483329234921034514626437449805596103307994145347784574699992128599999399612281615219314888769388022281083001986016549416542616968586788372609587745676182507275992950893180521872924610867639958916145855058397274209809097817293239301067663868240401113040247007350857828724627134946368531815469690466968693925472519413992914652423857762550047485295476814795467007050347999588867695016124972282040303995463278830695976249361510102436555352230690612949388599015734661023712235478911292547696176005047974928060721268039226911027772261025441492215765045081206771735712027180242968106203776578837166909109418074487814049075517820385653909910477594141321543284406250301802757169650820964273484146957263978842560084531214065935809041271135920041975985136254796160632288736181367373244506079244117639975974619383584574915988097667447093006546342423460634237474666080431701260052055928493695941434081468529815053947178900451835755154125223590590687264878635752541911288877371766374860276606349603536794702692322971868327717393236192007774522126247518698334951510198642698878471719396649769070825217423365662725928440620430214113719922785269984698847702323823840055655517889087661360130477098438611687052310553149162517283732728676007248172987637569816335415074608838663640693470437206688651275688266149730788657015685016918647488541679154596507234287730699853713904300266530783987763850323818215535597323530686043010675760838908627049841888595138091030423595782495143988590113185835840667472370297149785084145853085781339156270760356390763947311455495832266945702494139831634332378975955680856836297253867913275055542524491943589128405045226953812179131914513500993846311774017971512283785460116035955402864405902496466930707769055481028850208085800878115773817191741776017330738554758006056014337743299012728677253043182519757916792969965041460706645712588834697979642931622965520168797300035646304579308840327480771811555330909887025505207680463034608658165394876951960044084820659673794731680864156456505300498816164905788311543454850526600698230931577765003780704661264706021457505793270962047825615247145918965223608396645624105195510522357239739512881816405978591427914816542632892004281609136937773722299983327082082969955737727375667615527"
    while True:
        num_choice = input("Pi or Tau? ").lower()
        if num_choice == "pi" or num_choice == "tau":
            if num_choice == "tau":
                number = "Tau"
                pi = "6283185307179586476925286766559005768394338798750211641949889184615632812572417997256069650684234135964296173026564613294187689219101164463450718816256962234900568205403877042211119289245897909860763928857621951331866892256951296467573566330542403818291297133846920697220908653296426787214520498282547449174013212631176349763041841925658508183430728735785180720022661061097640933042768293903883023218866114540731519183906184372234763865223586210237096148924759925499134703771505449782455876366023898259667346724881313286172042789892790449474381404359721887405541078434352586353504769349636935338810264001136254290527121655571542685515579218347274357442936881802449906860293099170742101584559378517847084039912224258043921728068836319627259549542619921037414422699999996745956099902119463465632192637190048918910693816605285044616506689370070523862376342020006275677505773175066416762841234355338294607196506980857510937462319125727764707575187503915563715561064342453613226003855753222391818432840397876190514402130971726557731872306763655936460603904070603705937991547245198827782499443550566958263031149714484908301391901659066233723455711778150196763509274929878638510120801855403342278019697648025716723207127415320209420363885911192397893535674898896510759549453694208095069292416093368518138982586627354057978304209504324113932048116076300387022506764860071175280494992946527828398545208539845593564709563272018683443282439849172630060572365949111413499677010989177173853991381854421595018605910642330689974405511920472961330998239763669595507132739614853085055725103636835149345781955545587600163294120032290498384346434429544700282883947137096322722314705104266951483698936877046647814788286669095524833725037967138971124198438444368545100508513775343580989203306933609977254465583572171568767655935953362908201907767572721901360128450250410234785969792168256977253891208483930570044421322372613488557244078389890094247427573921912728743834574935529315147924827781731665291991626780956055180198931528157902538936796705191419651645241044978815453438956536965202953981805280272788874910610136406992504903498799302862859618381318501874443392923031419716774821195771919545950997860323507856936276537367737885548311983711850491907918862099945049361691974547289391697307673472445252198249216102487768780902488273099525561595431382871995400259232178883389737111696812706844144451656977296316912057012033685478904534935357790504277045099909333455647972913192232709772461154912996071187269136348648225030152138958902193192188050457759421786291338273734457497881120203006617235857361841749521835649877178019429819351970522731099563786259569643365997897445317609715128028540955110264759282903047492468729085716889590531735642102282709471479046226854332204271939072462885904969874374220291530807180559868807484014621157078124396774895616956979366642891427737503887012860436906382096962010741229361349838556382395879904122839326857508881287490247436384359996782031839123629350285382479497881814372988463923135890416190293100450463207763860284187524275711913277875574166078139584154693444365125199323002843006136076895469098405210829331850402994885701465037332004264868176381420972663469299302907811592537122011016213317593996327149472768105142918205794128280221942412560878079519031354315400840675739872014461117526352718843746250294241065856383652372251734643158396829697658328941219150541391444183513423344582196338183056034701342549716644574367041870793145024216715830273976418288842013502066934220628253422273981731703279663003940330302337034287531523670311301769819979719964774691056663271015295837071786452370979264265866179714128409350518141830962833099718923274360541963988619848977915142565781184646652194599424168867146530978764782386519492733461167208285627766064076498075179704874883405826553123618754688806141493842240382604066076039524220220089858643032168488971927533967790457369566247105316"
            break
    return number, pi

def everything(number, pi):
    seconds = 2
    apostrophe = "'"
   
   
    def delay():
      time.sleep(seconds)
   
   
    def half_delay():
      time.sleep(seconds / 2)
   
   
    def double_delay():
      time.sleep(seconds * 2)
   
   
    def quick_delay():
      time.sleep(seconds / 16)
   
   
    def fast_delay():
      time.sleep(seconds / 8)
   
   
    limit = len(str(pi))
   
    pi_chunked = "314 159 265 3589 7932 384 6264 3 3 83 27 95 02 88 41 97 16 9 39 93 75 10 58 20 97 49 44 59 23 07 81 64 06 286 208 998 628 034 825 342 117 0679 82 14 80 86 51 32 82 30 66 47 09 38 44 60 95 505 82 23 17 25"
   
    pi_chunks = pi_chunked.split()
   
    chess_link = 'https://www.youtube.com/watch?v=EEOlBwcooFQ'
    fly_me_to_the_moon_link = 'https://www.youtube.com/watch?v=ZEcqHA7dbwM'
   
    nothing = []
    lev_one_list = []
    lev_two_list = []
    lev_three_list = []
   
    chess = [
            "You have to know this (focus)", "Here's the moves it starts with",
            "They don't know, they just see this", "Slide the queen and bait it",
            "They're gonna take it (blunder)", "Big mistake, resign now",
            "You can't save it", "Take the piece and check 'em",
            "If they offer the queen, let 'em", "Set it up again if you get 'em",''
            "And let 'em know who sent it", "You know, the Bobby Bo Show?",
            "Do you follow?", "Reload it and stay focused", "'Cause you..."
    ]
   
    fly_me_to_the_moon = ["Fly me to the moon", "And let me play among the stars", "Let me see what spring is like on", "Jupiter", "and Mars", "In other words", "Please be true", "In other words", "I love you"]
   
   
    def build_chunk_list(chunk_list, word_list, prev_list):
      phrases = 0
      for phrase in word_list:
        chunk_list.append(pi_chunks[phrases + len(prev_list)])
        phrases += 1
   
   
    build_chunk_list(lev_one_list, chess, nothing)
    build_chunk_list(lev_two_list, fly_me_to_the_moon, lev_one_list)
   
    global pi_str; pi_str = str(pi)
    yes = ['yes', 'y', 'sure', 'okay']
    no = ['no', 'n']
    quit = ['quit', 'exit', 'exit program', 'quit program']
    options = []
    nums = 8
   
    for i in range(nums):
      options.append(str(i + 1))
    for option in quit:
      options.append(option)
   
   
    def enter():
      print('\n')
   
   
    def invalid():print('Invalid!')
   
   
    def return_to_menu():
      enter()
      print("Returning to main menu.")
      delay()
      enter()
      menu()
   
   
    def get_ordinal_suffix(num):
        # convert number to string
        num_str = str(num)
        # get last two digits of the number
        last_two = num_str[-2:]
        # get last digit of the number
        last_digit = num_str[-1]
        # if the last two digits are between 11 and 13, use "th"
        if 11 <= int(last_two) <= 13:
          return "th"
        # otherwise, use a lookup table to determine the suffix
        else:
          suffixes = {
            "1": "st",
            "2": "nd",
            "3": "rd"
            }
          return suffixes.get(last_digit, "th")
   
   
    def write(timee, text):
        if timee is None:
            timee = 0.1
        if not "\n" in text:
            text = text + "\n"
           
        for char in text:
            time.sleep(timee)
            sys.stdout.write(char)
            sys.stdout.flush()
   
   
    def write_credit():
      print("Typewriting Code Credit: https://github.com/NeverJar/typewriter/tree/main/typewriter")
   
   
    time_instructions_memorize_seconds = None
    times = time_instructions_memorize_seconds
   
   
    def range_in_pi(x, y):
      pi_range = ""
      for i in range(x - 1, y):
        pi_range += pi_str[i]
     
      if x == 1:
        pi_range = pi_range[0] + "." + pi_range[1:]
      elif x == 2:
        pi_range = "." + pi_range[0:]
     
      return pi_range
   
   
    def bold_count_in_range(rfd, n_in_pi, pi_range):
      true_n_place = n_in_pi - rfd
      bolded_digit = BOLD + UNDERLINE + pi_range[true_n_place] + END
     
      if rfd == 0:
        if true_n_place != rfd:
          if true_n_place == rfd + 1:
            result = pi_range[0] + "." + bolded_digit + pi_range[2:]
          elif true_n_place == rfd + 2:
            result = pi_range[0] + "." + pi_range[1] + bolded_digit + pi_range[3:]
          elif true_n_place == rfd + 3:
            result = pi_range[0] + "." + pi_range[1:3] + bolded_digit + pi_range[4:]
        else:
          result = bolded_digit + "." + pi_range[1:]
      elif rfd == 1:
        if true_n_place != rfd:
          result = "." + pi_range[:true_n_place] + bolded_digit + pi_range[true_n_place + 1:]
        else:
          result = "." + bolded_digit + pi_range[1:]
      else:
        result = pi_range[:true_n_place] + bolded_digit  + pi_range[true_n_place + 1:]
     
      return result
   
   
    def write_mem_feedback(id):
      range_first_dig = id[0]
      rfd = range_first_dig - 3
      if id[0] <= 3:
        rfd = 1
      range = range_in_pi(rfd, id[0] + 3)
      range_with_bolded_num = bold_count_in_range(rfd - 1, id[0] - 1, range.replace(".", ""))
     
      write(0.05, f"The {id[0]}{get_ordinal_suffix(id[0])} digit was '{id[2]}' in '{range_with_bolded_num}'\nInstead of answering '{id[2]}', you answered '{id[1]}'")
   
   
    def write_mem_instructions():
      write_credit()
      enter()
      write(times, "After these instructions, the game will begin.")
      half_delay()
      enter()
      write(times, f"You will be prompted to enter the digits of {number} individually.")
      half_delay()
      enter()
      write(times, "If you enter a wrong digit, you will be prompted about whether you want to continue.")
      half_delay()
      enter()
      write(times, "At any point, if you wish to exit the game and return to the main menu, enter 'Quit'.")
      half_delay()
      enter()
      write(times, "If you reach your goal, you will exit the game and return to the main menu automatically.")
      half_delay()
      enter()
      write(times, "The game will now start. Good luck!")
      half_delay()
      enter()
   
   
    def memorize(goal):
      mem_break_bool = False
      wrote_mem_credit = False
      said_quit_statement = False
      count = 0
      correct_count = 0
      conts = []
      print("Current Goal:", str(goal))
      half_delay()
      enter()
      while True:
        try:
          write_instructions = input("Instructions (y/n)? ")
          if write_instructions in yes + no:
            enter()
            if write_instructions in yes:
              write_mem_instructions()
              wrote_mem_credit = True
            break
          invalid
        except:
          invalid()
          enter()
          continue
      print("Go!")
      enter()
      half_delay()
      s = "s"
      if goal == 1:
        s = ""
      for digit in pi_str:
        if count == goal:
          print(f"Goal ({goal} Digit{s}) Reached!")
          half_delay()
          enter()
          mem_break_bool = True
          break
   
        while True:
          answer = input("Digit: ")
          try:
            int(answer)
            if len(answer) == 1:
              break
          except:
            pass
          if str(answer) in quit:
            mem_break_bool = True
            break
          invalid()
          fast_delay()
       
        if mem_break_bool:
          break
       
        elif int(answer) != int(digit):
          correct_count -= 1
          conts.append((count + 1, answer, digit))
          print("Wrong!")
          print(f"Digit was {digit}.")
   
          while True:
            if count + 1 == goal:
                break
         
            try:
              cont = str(input("Continue (y/n)? ")).lower()
              if cont in yes + no:
                break
              invalid
            except:
              invalid()
              half_delay()
              enter()
              continue
          try:
            if cont in no:
              enter()
              s = "s"
              conts_s = "s"
              correct_count += 1
              if correct_count <= 0:
                correct_count = "No"
              elif correct_count == 1:
                s = ""
              if len(conts) == 1:
                conts_s = ""
              half_delay()
              print(f"{correct_count} Digit{s} Recalled, {len(conts)} Digit{conts_s} Incorrect")
              said_quit_statement = True
              half_delay()
              enter()
              mem_break_bool = True
              break
          except:
            pass
        count += 1
        correct_count += 1
        if mem_break_bool:
          break
      if mem_break_bool:
        if len(conts) > 0:
          if not wrote_mem_credit:
            write_credit()
            enter()
          s = ""
          if len(conts)> 1:
            s = "s"
          if not said_quit_statement:
            print(f"You made {len(conts)} error{s}:")
            fast_delay()
            enter()
          for incorrect_dig in conts:
            id = incorrect_dig
            write_mem_feedback(id)
            quick_delay()
            enter()
        else:
          print("No Errors!")
   
        return_to_menu()
   
   
    def default_level(lev_list, phrases, link, has_completed):
      enter()
      print(link)
      enter()
      if not has_completed:
        write(0.05, "Pay attention to the lyrics and memorize the numbers.")
        write(0.05, "Enter the numbers you see:")
      else:
        print("Pay attention to the lyrics and memorize the numbers.")
        print("Enter the numbers you see:")
      quick_delay()
      enter()
      webbrowser.open(link)
      phrase_num = 0
      for chunk in lev_list:
        print(phrases[phrase_num])
        print(chunk)
        while True:
          try:
            answer = input("> ").lower()
            for thing in answer:
              int(answer)
            if answer == chunk:
              print("")
              break
            print("")
            fast_delay()
          except:
            invalid()
            fast_delay()
            continue
        phrase_num += 1
   
   
    def play(lev_list, phrases, link):
      playing = True
      has_completed = False
      while playing:
        default_level(lev_list, phrases, link, has_completed)
        has_completed = True
        while True:
          try:
            cont = input("Again (y/n)? ").lower()
            if cont not in yes + no:
              raise ValueError("Invalid!")
            break
          except ValueError as e:
            print(e)
            half_delay()
            enter()
            continue
        if cont in no:
          playing = False
      return_to_menu()
   
   
    def nth_dig_pi(n):
      print(f"The {n}{get_ordinal_suffix(n)} digit of {number} is {pi_str[n - 1]}.")
      enter()
   
   
    def is_range(input_str):
      # remove spaces from the input string
      input_str = input_str.replace(" ", "")
   
      # check if the input string is in the format x,y
      if "," in input_str:
        # split the input string into two parts separated by the comma
        parts = input_str.split(",")
        # check if both parts are integers
        if parts[0].isdigit() and parts[1].isdigit():
          parts[0] = int(parts[0])
          parts[1] = int(parts[1])
          if limit >= parts[0] > 0 and limit >= parts[1] > 0 and parts[0] != parts[1]:
            # convert the parts to integers and order them in a list
            x, y = sorted([int(parts[0]), int(parts[1])])
            return [x, y]
   
          # if the input string is not in the correct format, return None
          return False
        return False
      return False
   
   
    def spit_pi():
      fixed_pi_str = pi_str[0] + "." + pi_str[1:]
      enter()
      write_credit()
      enter()
      write(0.025, fixed_pi_str[0:408])
   
   
    def choose_pi_game():
      while True:
        break_bool = False
        choice = input("> ")
        choice_str = str(choice).lower()
   
        # nth Digit of Pi
        try:
          if 0 < int(choice) <= limit:
            nth_dig_pi(int(choice))
            break
        except:
          pass
   
        # Range of Digits in Pi
        range = is_range(choice)
        if is_range(choice):
          pi_range = range_in_pi(range[0], range[1])
          pi_range_len = len(pi_range)
          delay_secs = (104 / pi_range_len) * 0.1
          if pi_range_len < 104:
            delay_secs = 0.1
          write(delay_secs, pi_range)
          write_credit()
          enter()
          break
   
   
        elif choice_str == number.lower():
          spit_pi()
          break
   
        elif choice_str == "string":
          while True:
            try:
              string = input("Digits (1-20 Digits): ")
              for char in string:
                int(char)
              string_str = str(string)
              string_len = len(string_str)
              if not 0 < string_len <= 20:
                raise ValueError
              break_bool = True
              break
            except:
              invalid()
              half_delay()
              enter()
              continue
   
          string_location = pi_str.find(string_str) + 1
          sl = string_location
   
          predicate = "starts"
          if string_len == 1:
            predicate = " is"
   
          written_as = ""
          period = "."
          apos = apostrophe
         
          if sl == 1 and string_len > 1:
            written_as = " and includes the decimal like so: " + string_str[0] + "." + string_str[1:]
            period = ""
          elif sl == 2:
            written_as = " and includes the decimal like so: ." + string_str[0:]
            period = ""
         
          in_the_so_and_so = f" in the first {limit} digits of {number} "
          number_ = ""
          if string_len == 1:
            in_the_so_and_so = ""
            apos = ""
            number_ = f" of {number}"
   
          if sl < 1:
            print(f"{apos}{string}{apos} does not appear in the first {limit} digits of {number}.")
            break
           
          print(f"The first instance of {apos}{string_str}{apos}{in_the_so_and_so}{predicate} on the {sl}{get_ordinal_suffix(sl)} digit{number_}" + written_as + period)
          break
   
        elif choice_str == "instances":
          while True:
            try:
              instance_string = str(input("Digits: "))
              for dig in instance_string:
                int(dig)
              break_bool = True
              break
            except:
              invalid()
              half_delay()
              enter()
              pass
          num_instances = pi_str.count(instance_string)
          apos = apostrophe
          s = "s"
          if num_instances == 1:
            s = ""
          if len(instance_string) == 1:
            apos = ""
          if num_instances == 0:
            print(f"{apos}{instance_string}{apos} does not appear in the first {limit} digits of {number}.")
            break
          print(apos + instance_string + apos, "appears", num_instances, f"time{s} in the first {limit} digits of {number}.")
          break
   
        if break_bool:
          break
   
        invalid()
        half_delay()
        enter()
      return_to_menu()
   
   
    def show_pi_options():
      print("Please select one of the following options:")
      quick_delay()
      enter()
      print(f"A Positive Integer up to {limit} - Display the nth Digit of {number}")
      quick_delay()
      enter()
      print(f"'x, y' - A Range of x to y Digits (Both Positive Integers No More Than {limit}) in {number}")
      quick_delay()
      enter()
      print(f"'{number}' - Spit Out {number} Like It's Nothing")
      quick_delay()
      enter()
      print(f"'String' - Find the First Location of a Given String of Integers in the First {limit} Digits of {number}")
      quick_delay()
      enter()
      print(f"'Instances' - Find the Number of Instances of a Given String of Integers in the First {limit} Digits of {number}")
      quick_delay()
      enter()
      choose_pi_game()
   
   
    def select(choice):
      if choice == options[0]:
        play(lev_one_list, chess, chess_link)
      elif choice == options[1]:
        play(lev_two_list, fly_me_to_the_moon, fly_me_to_the_moon_link)
      elif choice in options[2:5]:
        enter()
        print("Not available yet!")
        half_delay()
        print("Coming out soon with v2!")
        half_delay()
        enter()
        return_to_menu()
      elif choice == options[2]:
        pass
      elif choice == options[3]:
        pass
      elif choice == options[4]:
        pass
      elif choice == options[5]:
        show_pi_options()
      elif choice == options[6]:
        while True:
          try:
            goal = int(input(f"Goal (1 - {limit}): "))
            if goal >= 1 and goal <= limit:
              break
            print("Out of range!")
            fast_delay()
            enter()
            continue
          except:
            invalid()
            half_delay()
            enter()
            continue
        memorize(goal)
      elif choice == options[7]:
        thing = choose_num()
        everything(thing[0], thing[1])
      elif choice in quit:
        enter()
        print("Quitting...")
        delay()
        os.system('clear')
        print("Program exitted.")
        half_delay()
        print("Thanks for playing!")
        exit()
   
   
    def print_choices():
      print("Please select one of the following options:")
      quick_delay()
      enter()
      print("# = Not Available Yet")
      quick_delay()
      enter()
      print("'1' - Level 1")
      quick_delay()
      print("'2' - Level 2")
      quick_delay()
      print("'3' - Level 3 #")
      quick_delay()
      print("'4' - Level 4 #")
      quick_delay()
      print("'5' - Level 5 #")
      quick_delay()
      print(f"'6' - {number} NON-Memorization Games/Statistics")
      quick_delay()
      print("'7' - ***UPDATED*** Practice")
      quick_delay()
      print("'8' - ***NEW*** Switch Number")
      quick_delay()
      print("'Quit' - Exit Program")
      quick_delay()
      enter()
   
   
    def menu():
      choice = ""
      while choice not in options:
        print_choices()
        choice = input(str("What would you like to do? ")).lower()
        if choice not in options:
          enter()
          invalid()
          half_delay()
          enter()
      select(choice)

  
    menu()
thing = choose_num()
everything(thing[0], thing[1])
